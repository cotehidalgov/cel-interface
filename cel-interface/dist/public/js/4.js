(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[4],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/clojure/clojure.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/clojure/clojure.js ***!
  \******************************************************************************/
/*! exports provided: conf, language */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conf\", function() { return conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"language\", function() { return language; });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nvar conf = {\n    comments: {\n        lineComment: ';;',\n    },\n    brackets: [['(', ')'], ['{', '}'], ['[', ']']],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n    ],\n};\nvar language = {\n    defaultToken: '',\n    ignoreCase: true,\n    tokenPostfix: '.clj',\n    brackets: [\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n    ],\n    keywords: [\n        'ns',\n        'ns-unmap',\n        'create-ns',\n        'in-ns',\n        'fn',\n        'def',\n        'defn',\n        'defmacro',\n        'defmulti',\n        'defonce',\n        'require',\n        'import',\n        'new',\n        'refer',\n        'pos',\n        'pos?',\n        'filter',\n        'map',\n        'reduce',\n        'repeat',\n        'key',\n        'rest',\n        'concat',\n        'into',\n        'reverse',\n        'iterate',\n        'range',\n        'drop',\n        'drop-while',\n        'take',\n        'take-while',\n        'neg',\n        'neg?',\n        'bound-fn',\n        'if',\n        'if-not',\n        'if-let',\n        'case,',\n        'contains',\n        'conj',\n        'disj',\n        'sort',\n        'get',\n        'assoc',\n        'merge',\n        'keys',\n        'vals',\n        'nth',\n        'first',\n        'last',\n        'count',\n        'contains?',\n        'cond',\n        'condp',\n        'cond->',\n        'cond->>',\n        'when',\n        'while',\n        'when-not',\n        'when-let',\n        'when-first',\n        'do',\n        'future',\n        'comment',\n        'doto',\n        'locking',\n        'proxy',\n        'println',\n        'type',\n        'meta',\n        'var',\n        'as->',\n        'reify',\n        'deftype',\n        'defrecord',\n        'defprotocol',\n        'extend',\n        'extend-protocol',\n        'extend-type',\n        'specify',\n        'specify!',\n        'try',\n        'catch',\n        'finally',\n        'let',\n        'letfn',\n        'binding',\n        'loop',\n        'for',\n        'seq',\n        'doseq',\n        'dotimes',\n        'when-let',\n        'if-let',\n        'when-some',\n        'if-some',\n        'this-as',\n        'defmethod',\n        'testing',\n        'deftest',\n        'are',\n        'use-fixtures',\n        'use',\n        'remove',\n        'run',\n        'run*',\n        'fresh',\n        'alt!',\n        'alt!!',\n        'go',\n        'go-loop',\n        'thread',\n        'boolean',\n        'str',\n    ],\n    constants: ['true', 'false', 'nil'],\n    operators: [\n        '=',\n        'not=',\n        '<',\n        '<=',\n        '>',\n        '>=',\n        'and',\n        'or',\n        'not',\n        'inc',\n        'dec',\n        'max',\n        'min',\n        'rem',\n        'bit-and',\n        'bit-or',\n        'bit-xor',\n        'bit-not',\n    ],\n    tokenizer: {\n        root: [\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\n            [/[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?/, 'number.float'],\n            [\n                /(?:\\b(?:(ns|def|defn|defn-|defmacro|defmulti|defonce|ns|ns-unmap|fn))(?![\\w-]))(\\s+)((?:\\w|\\-|\\!|\\?)*)/,\n                ['keyword', 'white', 'variable'],\n            ],\n            [\n                /[a-zA-Z_#][a-zA-Z0-9_\\-\\?\\!\\*]*/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@constants': 'constant',\n                        '@operators': 'operators',\n                        '@default': 'identifier',\n                    },\n                },\n            ],\n            [/\\/#\"(?:\\.|(?:\\\")|[^\"\"\\n])*\"\\/g/, 'regexp'],\n            { include: '@whitespace' },\n            { include: '@strings' },\n        ],\n        whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/;;.*$/, 'comment']],\n        strings: [\n            [/\"$/, 'string', '@popall'],\n            [/\"(?=.)/, 'string', '@multiLineString'],\n        ],\n        multiLineString: [\n            [/\\\\./, 'string.escape'],\n            [/\"/, 'string', '@popall'],\n            [/.(?=.*\")/, 'string'],\n            [/.*\\\\$/, 'string'],\n            [/.*$/, 'string', '@popall'],\n        ],\n    },\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/basic-languages/clojure/clojure.js\n");

/***/ })

}]);